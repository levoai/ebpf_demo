# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TimeStampAndBlob200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: int=None, base64_blob: str=None):
        """TimeStampAndBlob200 - a model defined in OpenAPI

        :param timestamp: The timestamp of this TimeStampAndBlob200.
        :param base64_blob: The base64_blob of this TimeStampAndBlob200.
        """
        self.openapi_types = {
            'timestamp': int,
            'base64_blob': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'base64_blob': 'base64_blob'
        }

        self._timestamp = timestamp
        self._base64_blob = base64_blob

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeStampAndBlob200':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The time_stamp_and_blob_200 of this TimeStampAndBlob200.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this TimeStampAndBlob200.

        Unix epoch time in seconds, UTC

        :return: The timestamp of this TimeStampAndBlob200.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TimeStampAndBlob200.

        Unix epoch time in seconds, UTC

        :param timestamp: The timestamp of this TimeStampAndBlob200.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")
        if timestamp is not None and timestamp > 2147483647:
            raise ValueError("Invalid value for `timestamp`, must be a value less than or equal to `2147483647`")
        if timestamp is not None and timestamp < 0:
            raise ValueError("Invalid value for `timestamp`, must be a value greater than or equal to `0`")

        self._timestamp = timestamp

    @property
    def base64_blob(self):
        """Gets the base64_blob of this TimeStampAndBlob200.


        :return: The base64_blob of this TimeStampAndBlob200.
        :rtype: str
        """
        return self._base64_blob

    @base64_blob.setter
    def base64_blob(self, base64_blob):
        """Sets the base64_blob of this TimeStampAndBlob200.


        :param base64_blob: The base64_blob of this TimeStampAndBlob200.
        :type base64_blob: str
        """
        if base64_blob is None:
            raise ValueError("Invalid value for `base64_blob`, must not be `None`")

        self._base64_blob = base64_blob
